***************
*** 50,68 ****
      lambda {t.value}.should raise_error(RuntimeError)
    end
  
-   it "re-raises active exception" do
-     t = Thread.new do
        begin
-         1/0
-       rescue ZeroDivisionError
-         sleep 3
        end
      end
- 
-     Thread.pass while t.status and t.status != "sleep"
-     t.raise
-     lambda {t.value}.should raise_error(ZeroDivisionError)
-     t.kill
    end
  end
  
--- 50,73 ----
      lambda {t.value}.should raise_error(RuntimeError)
    end
  
+   ruby_version_is "1.9" do
+     it "raises a RuntimeError when called with no arguments" do
+       t = Thread.new do
+         begin
+           1/0
+         rescue ZeroDivisionError
+           sleep 3
+         end
+       end
        begin
+         raise RangeError
+       rescue
+         Thread.pass while t.status and t.status != "sleep"
+         t.raise
        end
+       lambda {t.value}.should raise_error(RuntimeError)
+       t.kill
      end
    end
  end
  
***************
*** 105,111 ****
      lambda {t.value}.should raise_error(RuntimeError)
    end
  
-   it "re-raises active exception" do
      raised = false
      t = Thread.new do
        begin
--- 110,116 ----
      lambda {t.value}.should raise_error(RuntimeError)
    end
  
+   it "raise the given argument even when there is an active exception" do
      raised = false
      t = Thread.new do
        begin
***************
*** 115,125 ****
          loop { }
        end
      end
- 
-     Thread.pass until raised || !t.alive?
-     t.raise
-     lambda {t.value}.should raise_error(ZeroDivisionError)
    end
  end
  
  describe "Thread#raise on same thread" do
--- 120,134 ----
          loop { }
        end
      end
+     begin
+       raise "Create an active exception for the current thread too"
+     rescue
+       Thread.pass until raised || !t.alive?
+       t.raise RangeError
+       lambda {t.value}.should raise_error(RangeError)
+     end
    end
+ 
  end
  
  describe "Thread#raise on same thread" do
